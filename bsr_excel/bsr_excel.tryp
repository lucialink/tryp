<?xml version="1.0" encoding="UTF-8"?>
<tryp>
    <connections>
        <connection name="OLAP">
            <host>solar2</host>
            <port>5433</port>
            <database>atomstore_olap</database>
            <user>postgres</user>
            <password>dataNew!1</password>
        </connection>
    </connections>
    <datasets>
        <dataset name="dsr">
            <connection>OLAP</connection>
            <query><![CDATA[

SELECT 
*
FROM
(
(
SELECT
    regional.parent_name AS "Regional",
    areas.parent_name AS "Region",
    distributors.parent_name AS "Distributor",
    distributors.child_code AS "SR Code",
    distributors.child_name AS "SR Name",
    categories.parent_code AS "Category",
    t1.amount AS "Gross Sales",
    sum(t2.amount) AS "BSR",
    t2.amount/ (CASE t1.amount WHEN 0 THEN NULL ELSE t1.amount END) AS "percentage"

FROM
    (
        SELECT
            sales_representative_id,
            product_category_id,
            sum(fact_invoices.standard_value) AS amount
        FROM
            mv_fact_invoices AS fact_invoices
            JOIN dim_calendar
            ON
                fact_invoices.calendar_id = dim_calendar.id
            JOIN dim_sites
            ON
                fact_invoices.site_id = dim_sites.id
        WHERE
            dim_sites.principal_code = 'kraft'
            AND fact_invoices.delivered_quantity > 0
            AND date_trunc('mon', dim_calendar.date) = date_trunc('mon', now()::date)::date
            
            -- AND date_trunc('mon', dim_calendar.date) = date_trunc('mon', 'epoch'::timestamp with time zone + (cast(? as double precision) * '1 second'::interval))::date
            --AND dim_sites.dome_identifier || '.' || dim_sites.principal_code in (!security_filter)
            AND dim_sites.active is TRUE
        GROUP BY
            1, 2
    ) AS t1
    LEFT JOIN
    (
        SELECT
            sales_representative_id,
            product_category_id,
            sum(fact_goods_return_notes.standard_value) AS amount
        FROM
            mv_fact_goods_return_notes AS fact_goods_return_notes
            JOIN dim_calendar
            ON
                fact_goods_return_notes.calendar_id = dim_calendar.id
            JOIN dim_sites
            ON
                fact_goods_return_notes.site_id = dim_sites.id
        WHERE
            dim_sites.principal_code = 'kraft'
            AND fact_goods_return_notes.code NOT IN ('200', '201')
            AND fact_goods_return_notes.quantity > 0
            AND date_trunc('mon', dim_calendar.date) = date_trunc('mon', now()::date)::date
            -- AND date_trunc('mon', dim_calendar.date) = date_trunc('mon', 'epoch'::timestamp with time zone + (cast(? as double precision) * '1 second'::interval))::date
            --AND dim_sites.dome_identifier || '.' || dim_sites.principal_code in (!security_filter)
            AND dim_sites.active is TRUE
        GROUP BY
            1, 2
    ) AS t2
    --USING (sales_representative_id, "Category")
    --JOIN mv_closure_sites_hierarchy AS regional
    --ON
    --sales_representative_id = regional.child_id
    --AND regional.extended
    --AND regional.parent_level = 2

    
    USING (sales_representative_id, product_category_id)

    JOIN mv_closure_sites_hierarchy AS regional
    ON
    sales_representative_id = regional.child_id
    AND regional.extended
    AND regional.parent_level = 2

    
    JOIN mv_closure_sites_hierarchy AS areas
    ON
        sales_representative_id = areas.child_id
        AND areas.extended IS TRUE
        AND areas.parent_level = 3
    JOIN mv_closure_sites_hierarchy AS distributors
    ON
        sales_representative_id = distributors.child_id
        AND distributors.extended IS TRUE
        AND distributors.parent_level = 4
    JOIN mv_closure_product_categories AS categories
    ON
        product_category_id = categories.child_id
        AND categories.extended IS FALSE
        AND categories.parent_level = 1
GROUP BY
    1, 2, 3, 4, 5, 6, 7, 9
ORDER BY
    1, 2, 3, 4, 5, 6, 7, 9
) as dsr_data_set
JOIN
(
  select category_id, (ARRAY['BISCUITS','SNACKS','CHEESE','GROCERY','CONFECTIONERY','kraft_UNK'])[category_id] AS category_name from
          generate_series(1,array_upper(ARRAY['BISCUITS','SNACKS','CHEESE','GROCERY','CONFECTIONERY','kraft_UNK'],1)) category_id
  --select category_id, (ARRAY[!category])[category_id] AS category_name from
  --       generate_series(1,array_upper(ARRAY[!category],1)) category_id
) as category
ON dsr_data_set."Category" = category.category_name
) as ordered_dsr_data


                ]]>
            </query>
        </dataset>
    </datasets>
        <report name='dsr'>
            <dataset>dsr</dataset>
            <rows>Regional,Region,Distributor,SR Code,SR Name</rows>
            <rows_results>Regional,Region,Distributor</rows_results>
            <columns>Category</columns>
            <values>BSR</values>
            <computed_values>
                <percentage>percentage</percentage>
            </computed_values>
            <labels>
                <values>
                    <bsr>
                        <key>BSR</key>
                        <label>BSR</label>
                    </bsr>
                    <percentage>
                        <key>percentage</key>
                        <label>% vs. Sales</label>
                    </percentage>
                </values>
            </labels>
        </report>
</tryp>
